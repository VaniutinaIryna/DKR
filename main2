#include <stdio.h>
#include <stdlib.h>

int** memory_allocation(int);
void fill_int_array(int**, int);
void print_int_array(const int**, int);
void matrix_sort(int**, int);
void array_copy(const int**, int**, int);
void clearMemory(int**, int);

int main()
{
    int N;
    printf("Matrix size:\n");
    scanf("%d", &N);
    int** A = memory_allocation(N);
    int** B = memory_allocation(N);
    if (A==NULL || B==NULL)
    {
        printf("\nMemory has not been allocated");
        exit(0);
    }
    fill_int_array(A, N);
    array_copy(A, B, N);
    system("cls");
    print_int_array(A, N);
    printf("\n");
    matrix_sort(B, N);
    print_int_array(B, N);
    clearMemory(A, N);
    clearMemory(B, N);
}

int** memory_allocation(int N)
{
    int** matrix = (int**) malloc(N* sizeof(int*));
    for(int i=0; i<N; i++)
        matrix[i] = (int*) malloc(N*sizeof(int));
    return matrix;
}

void fill_int_array(int** A, int N)
{
    int temp=0;
    for(int i=0; i<N; i++)
        for(int j=0; j<N; j++)
        {
            printf("Value for [%d][%d] = ", i, j);
            scanf("%d", &temp);
            A[i][j] = temp;
        }
}

void print_int_array(const int** A, int N)
{
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<N; j++)
            printf("%d\t", A[i][j]);
        printf("\n");
    }
}

void array_copy(const int** A, int** B, int N)
{
    for(int i=0; i<N; i++)
        for(int j=0; j<N; j++)
            B[i][j] = A[i][j];
}

void matrix_sort(int** A, int N)
{
    for(int n = 0; n<N; n++)
        for(int i=1, temp; i<N; i++)
            for(int j=0; j<N; j++)
                if(A[i][j]>A[i-1][j])
                {
                    temp = A[i][j];
                    A[i][j] = A[i-1][j];
                    A[i-1][j] = temp;
                }
}

void clearMemory(int** A, int N)
{
    for(int i=0; i<N; i++)
        free(A[i]);
    free(A);
}

